If you think of a feature that would be useful in the future add it here:

- print heat map of zones: a green circle indidcating intended location and then zones are 
different shades of red (would be an easy visual sanity check like display_zones
    - Everett will implement this once helper functions and data cleaning functions are done

- condition AccuracyMatrix on State interface. We want the flexibility later to be able to take 
into account things like Stadium or other variables that we might not think important but the MLB
does, so being able to add that var to State and then have AccuracyMatrix compute itself for each
state is the way to make this scalable. From Mia: I don't think anything we'd condition the AccuracyMatrix 
on is actually related to state. Things like Stadium are not state variables they're global variables 
of the game because they remain constant throughout--> i.e. things that affect how we FIRST partition the data. 
Things we might add to state are runners on base, score, etc, and those are way less likely to have an impact 
on AccuracyMatrix. Like I said I also don't think we should hypothesize TOO much about what we MIGHT be asked to 
do. By nature of being OOP it'll be easy to refractor and update as we go.

- make our transitions (which is currently a dict with pitch name as key and values as list) a
data frame. In fact calculating the transition functions should just be a lambda function that we apply
to our cleaned data frame. the dictionary is {col:[vals for each row],etc...}

- group emprical data as a data frame using df.groupby(pitchName). We want to partition by both state
and pitch type 

- create our own list of videos and train and object detection model that tracks the ball and catcher glove

- change the metric we minimize from OBP to runs, where we need to iterate through game data to figure out
the result of each at bat and understand how it updated the state. This means pulling at-bat data by game
filtering the at-bats by each inning (top and bottom), mapping what pitch led to what state (either count
changed, or something happened if the ball was in play). How would we treat stolen bases in this scenario?
How would we treat wild pitches? How would we treat hit by pitch?


Getting On-Base Information for 2019
- if we want to expand the game to outs and runners on base, then we should figure out how to get the 
2019 runner on base data and integrate that into our data set. We can try to scrape BaseBall savant

test by making sure the distribution is similar in 2019 to the previous years

what is the url, what is the gid?
Sample URL:
https://baseballsavant.mlb.com/gamefeed?game_pk=631032&game_date=2020-9-15
we should have game_data information, but we need game park information
which we might be able to get from online for 2019?

In which case we can feed:
https://baseballsavant.mlb.com/gamefeed?game_pk=XXX&game_date=YYY
where we dynamically feed XXX and YYY based on information we have

- add barcharts to make the outcome/transition probabilities easy to understand visually

- update the way display_zones visualizes the Pitch object, text is off when dimensions change